(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (union-iter set1 set2)
    (cond ((or (null? set1) (null? set2)) '())
          ((not (element-of-set? (car set1) set2))
           (cons (car set1)
                 (union-iter (cdr set1) set2)))
          (else (union-iter (cdr set1) set2))))
(define (union-set set1 set2)
  (append set2 (union-iter set1 set2)))

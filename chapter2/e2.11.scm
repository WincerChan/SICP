(define (negative-interval? x) (< (upper-bound x) 0))
(define (positive-interval? x) (> (lower-bound x) 0))
(define (spans-zero? x) (and (> (upper-bound x) 0) (< (lower-bound x) 0)))
(define (mul-interval x y)
  (let ((lx (lower-bound x))
        (ly (lower-bound y))
        (ux (upper-bound x))
        (uy (upper-bound y)))
    (cond ((and (negative-interval? x)
                (negative-interval? y)) (make-interval (* ux uy) (* lx ly)))
          ((and (negative-interval? x)
                (positive-interval? y)) (make-interval (* lx uy) (* ly ux)))
          ((and (negative-interval? x)
                (spans-zero? y)) (make-interval (* uy lx) (* lx ly)))
          ((and (spans-zero? x)
                (negative-interval? y)) (make-interval (* ly ux) (* lx ly)))
          ((and (spans-zero? x)
                (spans-zero? y)) (make-interval (min (* lx uy) (* ux ly))
                                                (max (* lx ly) (* ux uy))))
          ((and (spans-zero? x)
                (positive-interval? y)) (make-interval (* lx uy) (* ux uy)))
          ((and (positive-interval? x)
                (negative-interval? y)) (make-interval (* ux ly) (* uy lx)))
          ((and (positive-interval? x)
                (spans-zero? y)) (make-interval (* ly ux ) (* uy ux)))
          (else (make-interval (* lx ly) (* ux uy))))))

;; 看起来不难，做了才知道，查阅了一些答案
(define (non-number? x)
  (not (number? x)))
(define (number-args args)
  (filter number? args))
(define (non-number-args args)
  (filter non-number? args))

(define (make-sum . a)
  (let ((number-term (apply + (number-args a)))
        (non-number-term (non-number-args a)))
    (cond ((zero? number-term)
           (let ((term-count (length non-number-term)))
             (cond ((zero? term-count) 0)
                   ((= 1 term-count) (car non-number-term))
                   (else (cons '+ non-number-term)))))
          ((zero? (length non-number-term))
           number-term)
          (else (append (list '+ number-term)
                        non-number-term)))))

(define (make-product . a)
  (let ((number-term (apply * (number-args a)))
        (non-number-term (non-number-args a)))
    (cond ((zero? number-term) 0)
          ((= 1 number-term)
           (let ((term-count (length non-number-term)))
             (cond ((zero? term-count) 0)
                   ((= 1 term-count) (car non-number-term))
                   (else (cons '* non-number-term)))))
          ((zero? (length non-number-term))
           number-term)
          (else (append (list '* number-term)
                        non-number-term)))))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (cddr s))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (cddr p))
